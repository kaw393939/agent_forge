#!/bin/bash

# Agent Forge Setup Script
# This script automates the entire setup process for both development and production environments

set -e  # Exit on error

# Color formatting for messages
BLUE='\033[0;34m'
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Print formatted messages
function print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
function print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
function print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
function print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# Path variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Ensure we're in the project root
cd "$PROJECT_ROOT"

# Function to check required tools
function check_dependencies() {
    print_status "Checking required dependencies..."
    
    local missing_deps=()
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        missing_deps+=("docker")
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        missing_deps+=("docker-compose")
    fi
    
    # Check for production deployment tools if needed
    if [ "$DEPLOYMENT_TYPE" == "production" ]; then
        # Check Terraform
        if ! command -v terraform &> /dev/null; then
            missing_deps+=("terraform")
        fi
        
        # Check kubectl
        if ! command -v kubectl &> /dev/null; then
            missing_deps+=("kubectl")
        fi
        
        # Check Helm
        if ! command -v helm &> /dev/null; then
            missing_deps+=("helm")
        fi
    fi
    
    # Report missing dependencies
    if [ ${#missing_deps[@]} -gt 0 ]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        print_status "Please install the missing dependencies and run this script again."
        exit 1
    fi
    
    print_success "All required dependencies are installed!"
}

# Function to set up environment configuration
function setup_environment() {
    print_status "Setting up environment configuration..."
    
    # Check if .env file exists
    if [ -f "$PROJECT_ROOT/.env" ]; then
        print_status "Found existing .env file."
        read -p "Do you want to update it? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_status "Using existing .env file."
            source "$PROJECT_ROOT/.env"
            return
        fi
    fi
    
    # Create/update .env file
    print_status "Creating new .env file..."
    
    # Always prompt for OpenAI API key
    read -p "Enter your OpenAI API key: " OPENAI_API_KEY
    
    # For production, prompt for DigitalOcean token
    if [ "$DEPLOYMENT_TYPE" == "production" ]; then
        read -p "Enter your DigitalOcean API token: " DIGITAL_OCEAN_TOKEN
        read -p "Enter your Docker Hub username: " DOCKER_HUB_USERNAME
        read -p "Enter your Docker Hub token: " DOCKER_HUB_TOKEN
        read -p "Enter your domain name (default: mywebclass.org): " DOMAIN_NAME
        DOMAIN_NAME=${DOMAIN_NAME:-mywebclass.org}
    fi
    
    # Create the .env file
    cat > "$PROJECT_ROOT/.env" << EOF
# Agent Forge Environment Configuration
# Generated by setup.sh on $(date)

# OpenAI API Configuration
OPENAI_API_KEY=$OPENAI_API_KEY

EOF

    # Add production-specific variables if needed
    if [ "$DEPLOYMENT_TYPE" == "production" ]; then
        cat >> "$PROJECT_ROOT/.env" << EOF
# DigitalOcean Configuration
DIGITAL_OCEAN_TOKEN=$DIGITAL_OCEAN_TOKEN

# Docker Hub Configuration
DOCKER_HUB_USERNAME=$DOCKER_HUB_USERNAME
DOCKER_HUB_TOKEN=$DOCKER_HUB_TOKEN

# Domain Configuration
DOMAIN_NAME=$DOMAIN_NAME

EOF
    fi
    
    # Source the .env file
    source "$PROJECT_ROOT/.env"
    
    print_success ".env file created successfully!"
}

# Function to set up local development environment
function setup_local_dev() {
    print_status "Setting up local development environment..."
    
    # Update hosts file if needed
    print_status "Would you like to update your hosts file to include local domain entries?"
    print_status "This requires sudo access and will add entries for local testing."
    read -p "Update hosts file? (y/n) " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Call the update_hosts.sh script with sudo
        print_status "Updating hosts file..."
        sudo "$SCRIPT_DIR/update_hosts.sh"
    fi
    
    # Build and start containers
    print_status "Starting Docker containers..."
    docker-compose up -d
    
    print_success "Local development environment is now running!"
    print_status "You can access the applications at:"
    print_status "- Main Frontend: http://mywebclass.org or http://localhost:8502"
    print_status "- Service Registry: http://registry.mywebclass.org or http://localhost:8005"
    print_status "- Example Agent: http://agent.mywebclass.org"
    print_status "- Example Tool: http://tools.mywebclass.org/calculator"
    print_status "- Traefik Dashboard: http://traefik.mywebclass.org:8888"
    
    # Show logs
    print_status "Showing initial logs. Press Ctrl+C to exit logs (containers will keep running)."
    docker-compose logs -f
}

# Function to set up production environment
function setup_production() {
    print_status "Setting up production environment on DigitalOcean..."
    
    # Validate required variables
    if [ -z "$DIGITAL_OCEAN_TOKEN" ] || [ -z "$DOCKER_HUB_TOKEN" ] || [ -z "$OPENAI_API_KEY" ]; then
        print_error "Missing required environment variables."
        print_status "Please make sure DIGITAL_OCEAN_TOKEN, DOCKER_HUB_TOKEN, and OPENAI_API_KEY are set in your .env file."
        exit 1
    fi
    
    # Ask about Docker image building
    read -p "Do you want to build and push Docker images? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_status "Building and pushing Docker images..."
        "$SCRIPT_DIR/build_push_images.sh"
    fi
    
    # Run the Terraform deployment script
    print_status "Deploying infrastructure with Terraform..."
    "$SCRIPT_DIR/terraform_deploy.sh" "prod" "~/.ssh/id_rsa.pub" "~/.ssh/id_rsa" "$DOMAIN_NAME"
    
    print_success "Production deployment completed!"
    print_status "Remember to allow a few minutes for DNS propagation and certificate issuance."
    print_status "You can monitor the status with: kubectl get pods -n agent-forge"
}

# Main execution flow
clear
echo "=========================================================="
echo "        Agent Forge Setup Script                          "
echo "=========================================================="
echo
print_status "This script will set up Agent Forge for development or production."
echo

# Determine deployment type
echo "Select deployment type:"
echo "1) Local Development (Docker Compose)"
echo "2) Production (DigitalOcean Kubernetes)"
read -p "Enter choice [1-2]: " deployment_choice

case $deployment_choice in
    1)
        DEPLOYMENT_TYPE="development"
        ;;
    2)
        DEPLOYMENT_TYPE="production"
        ;;
    *)
        print_error "Invalid choice. Exiting."
        exit 1
        ;;
esac

# Execute setup steps
check_dependencies
setup_environment

if [ "$DEPLOYMENT_TYPE" == "development" ]; then
    setup_local_dev
else
    setup_production
fi

echo
print_success "Setup completed successfully!"
echo "If you encounter any issues, please check the documentation in the docs directory."
echo "For troubleshooting help, refer to docs/troubleshooting.md"
